# To support both python 2 and python 3
from __future__ import division, print_function, unicode_literals

# Common imports
import numpy as np
import os

# to make this notebook's output stable across runs
np.random.seed(42)

# To plot pretty figures
%matplotlib inline
import matplotlib
import matplotlib.pyplot as plt
plt.rcParams['axes.labelsize'] = 14
plt.rcParams['xtick.labelsize'] = 12
plt.rcParams['ytick.labelsize'] = 12

# Where to save the figures
PROJECT_ROOT_DIR = "."
CHAPTER_ID = "classification"

def save_fig(fig_id, tight_layout=True):
    path = os.path.join(PROJECT_ROOT_DIR, "images", CHAPTER_ID, fig_id + ".png")
    print("Saving figure", fig_id)
    if tight_layout:
        plt.tight_layout()
    plt.savefig(path, format='png', dpi=300)

#Import data sets
from sklearn.datasets import fetch_mldata
mnist=fetch_mldata('MNIST original')
#mnist

X,y=mnist['data'],mnist['target']
X.shape

%matplotlib inline
import matplotlib
import matplotlib.pyplot as plt
some_digit=X[36000]
#some_digit
some_digit_image=some_digit.reshape(28,28)
plt.imshow(some_digit_image,cmap=matplotlib.cm.binary,interpolation="nearest")
plt.axis("off")

#save_fig()

def plot_digit(data):
  image=data.reshape(28,28)
  plt.imshow(image,cmap=matplotlib.cm.binary,interpolation="nearest")
  plt.axis("off")

def plot_digits(instances,images_per_row=10,**options):
  size=28
  images_per_row=min(len(instances),images_per_row)
  images=[instance.reshape(size,size) for instance in instances]
  n_rows=(len(instances)-1)
  row_images=[]
  n_empty=n_rows*images_per_row - len(instances)
  images.append(np.zeros((size,size*n_empty)))
  for row in range(n_rows):
    rimages=images[row*images_per_row :(row+1)*images_per_row]
    row_images.append(np.concatenate(rimages,axis=1))
  image=np.concatenate(row_images,axis=0)
  plt.imshow(image,cmap=matplotlib.cm.binary,**options)
  plt.axis('off')

plt.figure(figsize=(9,9))
example_images=np.r_[X[:12000:600],X[13000:30600:600],X[30600:60000:590]]
#plot_digits(example_images,images_per_row=10)
#save_fig("more_digits_plot")
#plt.show()

#y[36000]

X_train,X_test,y_train,y_test=X[:60000],X[60000:],y[:60000],y[60000:]

import numpy as np
shuffle_index=np.random.permutation(60000)
#print(shuffle_index)
X_train,y_train=X_train[shuffle_index],y_train[shuffle_index]

#Train the classifier
y_train_5=(y_train==5)
y_test_5=(y_test==5)

from sklearn.linear_model import SGDClassifier
sdg_clf=SGDClassifier(random_state=42,max_iter=5,tol=None)
sdg_clf.fit(X_train,y_train_5)

#by default hinge loss is used,which gives linear svm classifier
sdg_clf.predict([X[10000]])

#Print cross validation score for the model
from sklearn.model_selection import cross_val_score
cross_val_score(sdg_clf,X_train,y_train_5,cv=3,scoring="accuracy")

from sklearn.model_selection import cross_val_predict
y_train_pred=cross_val_predict(sdg_clf,X_train,y_train_5,cv=3)

print(y_train_pred)

#print conusion matrix
from sklearn.metrics import confusion_matrix
confusion_matrix(y_train_5,y_train_pred)

y_train_perfect_predictions = y_train_5
confusion_matrix(y_train_5, y_train_perfect_predictions)

#precision and recall
from sklearn.metrics import precision_score, recall_score
precision_score=precision_score(y_train_5, y_train_pred)
print("precision score",precision_score)
recall_score=recall_score(y_train_5,y_train_pred)
print("recall score",recall_score)
